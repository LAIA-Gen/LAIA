openapi: 3.0.0
info:
  title: Person and Pet API
  description: An example API for managing people and their pets
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Development server
paths:
  /persons:
    get:
      summary: Get all persons
      responses:
        '200':
          description: A list of persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
    post:
      summary: Add a new person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '201':
          description: The created person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
  /person/{personId}:
    parameters:
      - name: personId
        in: path
        required: true
        description: ID of the person to retrieve
        schema:
          type: string
    get:
      summary: Get a person by ID
      responses:
        '200':
          description: The requested person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
    put:
      summary: Update a person by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: The updated person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
    delete:
      summary: Delete a person by ID
      responses:
        '204':
          description: Person deleted successfully
          
  /pet/create:
    post:
      summary: Create a new pet
      responses:
        '201':
          description: The created pet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
      x-allowed-roles: "user,owner,admin"

  /pet/read:
    get:
      summary: Get pet information
      responses:
        '200':
          description: Pet information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
      x-allowed-roles: "public,o+"

  /pet/{petId}:
    parameters:
      - name: petId
        in: path
        required: true
        description: ID of the pet to retrieve
        schema:
          type: string
    get:
      summary: Get a pet by ID
      responses:
        '200':
          description: The requested pet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
components:
  schemas:
    Pet:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the pet
        name:
          type: string
          description: Name of the pet
        species:
          type: string
          description: Species of the pet
        owner_id:
          type: string
          format: uuid
          description: ID of the owner of the pet

    Person:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the person
        name:
          type: string
          description: Name of the person
          x-view-roles:
            type: string
            description: Roles required to view this field
            example: admin
          x-edit-roles:
            type: string
            description: Roles required to edit this field
            example: admin
        age:
          type: integer
          description: Age of the person
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'